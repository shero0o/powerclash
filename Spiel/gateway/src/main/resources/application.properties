#??????????????????????????????????????????????????????????????????????????????????????????
# 1) Basic Gateway + Eureka configuration
#??????????????????????????????????????????????????????????????????????????????????????????

spring.application.name=gateway
server.port=8090

# Point to your Eureka server; allow Gateway to register itself and fetch registry
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# (Optional) You can disable the auto?discovery?locator now that we?re using explicit routes.
# If you leave this ?true,? Gateway will automatically create one?to?one routes
# for every service ID fetched from Eureka (e.g. /spiel-backend/** ? lb://spiel-backend).
spring.cloud.gateway.discovery.locator.enabled=false

#??????????????????????????????????????????????????????????????????????????????????????????
# 2) CORS settings (unchanged from what you already have)
#??????????????????????????????????????????????????????????????????????????????????????????
spring.webflux.cors.allowed-origins=http://localhost:3000
spring.webflux.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.webflux.cors.allowed-headers=*
spring.webflux.cors.max-age=3600

# Expose actuator endpoints
management.endpoints.web.exposure.include=health,metrics,gateway,prometheus

#??????????????????????????????????????????????????????????????????????????????????????????
# 3) EXPLICIT ROUTES for your single ?spiel-backend? service
#??????????????????????????????????????????????????????????????????????????????????????????

# ?? Route #1: Forward all HTTP calls to /spiel/** ? spiel-backend (port 8081)
#     We strip off the ?/spiel? prefix so that the backend just sees ?/?? instead of ?/spiel/??.
#
#    Incoming:  GET http://localhost:8080/spiel/rooms
#    Proxied:   GET http://<spiel-backend-instance>:8081/rooms
#
spring.cloud.gateway.routes[0].id=spiel-http
spring.cloud.gateway.routes[0].uri=lb://spiel-backend
spring.cloud.gateway.routes[0].predicates[0]=Path=/spiel/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# ?? Route #2: Proxy WebSocket ?upgrades? on /ws/** ? spiel-backend?s WS endpoint.
#     Any request to ws://localhost:8080/ws/? will be forwarded as a WebSocket to the
#     registry?discovered spiel-backend instance. We also strip the ?/ws? prefix so
#     the backend sees just ?/??.
#
#    Incoming:  ws://localhost:8080/ws/game/{roomId}
#    Proxied:   ws://<spiel-backend-instance>:8081/game/{roomId}
#
# Note: Gateway will detect the ?Upgrade: websocket? header and automatically switch to
#       a raw TCP tunnel. Because we used ?lb://spiel-backend?, Gateway will load?balance
#       across all registered spiel-backend instances (if there are more than one).
#
spring.cloud.gateway.routes[1].id=spiel-ws
spring.cloud.gateway.routes[1].uri=lb://spiel-backend
spring.cloud.gateway.routes[1].predicates[0]=Path=/ws/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1
